{
    "0": [],
    "1": [
        {
            "rect": {
                "x0": 54.0,
                "y0": 363.4940185546875,
                "x1": 381.07000732421875,
                "y1": 724.5635375976562
            },
            "sub_areas": [
                {
                    "kind": "free_response",
                    "code_textarea": {
                        "x0": 54.0,
                        "y0": 363.4940185546875,
                        "x1": 381.07000732421875,
                        "y1": 724.5635375976562
                    },
                    "text": "{ \n}"
                }
            ],
            "text": "treeNode * deleteTreeList (treeNode * root) { \n}"
        }
    ],
    "2": [
        {
            "rect": {
                "x0": 54.0,
                "y0": 308.05401611328125,
                "x1": 273.04998779296875,
                "y1": 724.08349609375
            },
            "sub_areas": [
                {
                    "kind": "free_response",
                    "code_textarea": {
                        "x0": 54.0,
                        "y0": 308.05401611328125,
                        "x1": 273.04998779296875,
                        "y1": 724.08349609375
                    },
                    "text": "{ \n      \n}"
                }
            ],
            "text": "char* toCString(node * head) { \n      \n}"
        }
    ],
    "3": [],
    "4": [],
    "5": [
        {
            "rect": {
                "x0": 54.02399826049805,
                "y0": 249.999755859375,
                "x1": 486.191162109375,
                "y1": 603.5335083007812
            },
            "sub_areas": [],
            "text": "bstNode* insert(bstNode * root, int value){ \n   if (root == NULL) { \n       bstNode* res = malloc(sizeof(bstNode)); \n       res->data = ________; \n       res->sum = _________; \n       res->left = ________; \n       res->right = _______; \n       return res; \n   } \n   if (value <= root->data) \n       _________________________________________________ ; \n   else \n       _________________________________________________ ; \n   _________________________________________________ ; \n   return root; \n}"
        }
    ],
    "6": [],
    "7": [],
    "8": [],
    "9": [],
    "10": [],
    "11": [],
    "12": [],
    "13": [
        {
            "rect": {
                "x0": 54.0,
                "y0": 307.69976806640625,
                "x1": 334.8711853027344,
                "y1": 715.6835327148438
            },
            "sub_areas": [
                {
                    "kind": "free_response",
                    "code_textarea": {
                        "x0": 54.0,
                        "y0": 307.69976806640625,
                        "x1": 334.8711853027344,
                        "y1": 715.6835327148438
                    },
                    "text": "{ \n}"
                }
            ],
            "text": "int lis(int* values, int k, int max) { \n}"
        }
    ],
    "14": [],
    "15": [
        {
            "rect": {
                "x0": 54.0,
                "y0": 298.0997619628906,
                "x1": 442.90118408203125,
                "y1": 610.9035034179688
            },
            "sub_areas": [
                {
                    "kind": "free_response",
                    "code_textarea": {
                        "x0": 54.0,
                        "y0": 298.0997619628906,
                        "x1": 442.90118408203125,
                        "y1": 610.9035034179688
                    },
                    "text": "{ \n}"
                }
            ],
            "text": "int bestMatch(int client, int* matches, int length) { \n}"
        },
        {
            "rect": {
                "x0": 54.0,
                "y0": 624.4297485351562,
                "x1": 298.8711853027344,
                "y1": 719.6434936523438
            },
            "sub_areas": [],
            "text": "int count(int mask) { \n   int res = 0, i; \n   for (i=0; i<32; i++) \n       if ((mask & (1<<i)) != 0) \n           res++; \n   return res; \n}"
        }
    ]
}