{
    "0": [],
    "1": [
        {
            "rect": {
                "x0": 54.02399826049805,
                "y0": 368.1297607421875,
                "x1": 522.22119140625,
                "y1": 726.4595336914062
            },
            "sub_areas": [
                {
                    "kind": "free_response",
                    "code_textarea": {
                        "x0": 54.02399826049805,
                        "y0": 368.1297607421875,
                        "x1": 522.22119140625,
                        "y1": 726.4595336914062
                    },
                    "text": "{ \n}"
                }
            ],
            "text": "struct juice_case* create_case(char *new_name, int new_number) { \n}"
        }
    ],
    "2": [
        {
            "rect": {
                "x0": 54.02399826049805,
                "y0": 254.0740203857422,
                "x1": 529.421142578125,
                "y1": 664.7535400390625
            },
            "sub_areas": [],
            "text": "node* addValue3(node* head) { \n   if ( __________________ || _______________________ ) { \n       node* tmp = malloc(sizeof(node)); \n       tmp->data = 3; \n       tmp->next = head; \n       return tmp; \n   } \n   if ( _____________________ ) \n       return head; \n   node* iter = head; \n   while (iter->next != NULL && _________________________ ) \n       iter = ________________; \n   if ( _______________________ && _____________________ ) \n       return head; \n   node* tmp = malloc(sizeof(node)); \n   tmp->data = 3; \n   tmp->next = ______________________ ;  \n \n   iter->next = _____________________ ; \n \n \n \n \n \n   return __________________ ;      \n \n \n \n \n \n \n}"
        }
    ],
    "3": [
        {
            "rect": {
                "x0": 54.02399826049805,
                "y0": 531.18896484375,
                "x1": 536.2850341796875,
                "y1": 693.2652587890625
            },
            "sub_areas": [],
            "text": "void printValidMoves(stack towers[], int numTowers) { \n   for (int i=0; i<numTowers; i++) { \n       for (int j=0; j<numTowers; j++) { \n           if ( _________________________ ) continue; \n           if ( ____________ || _________________________________ ) \n            \n               printf(\"Valid move from tower %d to tower %d.\\n\", i, j); \n        } \n   } \n}"
        }
    ],
    "4": [],
    "5": [],
    "6": [
        {
            "rect": {
                "x0": 60.73632049560547,
                "y0": 286.5889892578125,
                "x1": 503.1351013183594,
                "y1": 373.7352600097656
            },
            "sub_areas": [],
            "text": "int hash(char *str) \n { \n    // Note: This converts letters on the range 'a' through 'z' or \n    // 'A' through 'Z' to integers on the range 0 through 25. \n    // For example: 'a' -> 0, 'b' -> 1, ..., 'z' -> 25.  \n    return (tolower(str[0]) \u2013 'a')%11; \n }"
        }
    ],
    "7": [],
    "8": [],
    "9": [],
    "10": [],
    "11": [],
    "12": [],
    "13": [
        {
            "rect": {
                "x0": 54.02399826049805,
                "y0": 274.2397766113281,
                "x1": 378.14117431640625,
                "y1": 573.5335083007812
            },
            "sub_areas": [
                {
                    "kind": "free_response",
                    "code_textarea": {
                        "x0": 54.02399826049805,
                        "y0": 274.2397766113281,
                        "x1": 378.14117431640625,
                        "y1": 573.5335083007812
                    },
                    "text": "{ \n    \n    \n}"
                }
            ],
            "text": "int sumEven(int vals[], int low, int high) { \n    \n    \n}"
        }
    ],
    "14": [],
    "15": [
        {
            "rect": {
                "x0": 54.02399826049805,
                "y0": 255.759765625,
                "x1": 342.14117431640625,
                "y1": 323.6235046386719
            },
            "sub_areas": [],
            "text": "void printWrapper(int n) { \n   int* array = malloc(sizeof(int)*n); \n   printRec(array, 0, n); \n   free(array); \n}"
        },
        {
            "rect": {
                "x0": 54.02399826049805,
                "y0": 337.3897705078125,
                "x1": 406.9711608886719,
                "y1": 636.4335327148438
            },
            "sub_areas": [],
            "text": "void printRec(int number[], int k, int n) { \n   if (k == n) { \n       ______________________ ; \n       ______________________ ; \n   } \n   int start = 0; \n   if ( ______________ ) \n       start = ___ ; \n   for (int i=start; i < ____ ; i++) { \n       if (k > 0 && _________________________ ) \n           continue; \n       number[ ____ ] = _____ ; \n       __________________________________ ; \n   } \n}"
        },
        {
            "rect": {
                "x0": 54.02399826049805,
                "y0": 649.9597778320312,
                "x1": 298.9211730957031,
                "y1": 718.0595092773438
            },
            "sub_areas": [],
            "text": "void print(int number[], int n) { \n   for (int i=0; i<n; i++) \n       printf(\"%d\", number[i]); \n   printf(\"\\n\"); \n}"
        }
    ]
}