{
    "questions": [
        {
            "question_id": 1,
            "question_content": "The struct Monster_List maintains a list of monsters using a dynamically sized array of pointers to \nMonster. A function prototype is given for a function initializeMonster, which takes in a pointer to a \nMonster that must already be pointing to memory that is allocated , and then fills that memory with \ninformation about a default monster. Write a function getDefaultMonsters which takes in a positive integer \nn, creates a pointer to a Monster_List, allocates room for it, and then fills it with n default Monster s, and \nthen returns a pointer to the Monster_list created. (Note: You must call initializeMonster in your solution.)  \n \ntypedef struct Monster  { \n    // Details not necessary to solve the problem.  \n} Monster; \n \ntypedef struct Monster_List  { \n    Monster** mArray ; \n    int numMonsters;  \n} Monster_List ; \n \n// Initializes the monster pointed to by mPtr to be the default  \n// monster.  \nvoid initializeMonster(Monster* mPtr);  \n \nMonster_List*  getDefaultMonsters (int n) { \n      \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n}"
        },
        {
            "question_id": 2,
            "question_content": "Suppose we have a singly linked list implemented with the structure below  and a function that takes in \nthe head of the list.  \n \ntypedef struct node {  \n    int num; \n    struct node* next;  \n} node; \n \nvoid whatDoesItDo ( node * head ) { \n     \n    int tot = 0;  \n    while (head != NULL) {  \n        head->data += tot;  \n        tot = head ->data; \n        head = head ->next; \n    } \n} \n \nIf we call whatDoesItDo(head) on the following list, show the list after the function has finished . \n \nhead \u2192  3 \u2192 9 \u2192 7 \u2192 1 \u2192 4 \u2192 NULL ? Please fill in the designated slots below.   \n  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\u2192 ____ \u2192 ____ \u2192 ____ \u2192 ____  \u2192 ____ \u2192 NULL"
        },
        {
            "question_id": 3,
            "question_content": "Convert the following infix expression to postfix using a stack.  Show the contents of the stack at the \nindicated points ( A, B, and C) in the infix expression.    \n \n         A                                         B                     C \n  4 + 3 * ( 2 \u2013 6 / ( 9 \u2013 7 * 1 ) + ( 2 + 3 ) * 1 ) \u2013 8 / ( 1 + 1 )  \n   \n \n \n       \n     \n     \n     \n     \n     \n     \n     \n \n   A        B                 C \n \nNote: A indicates the location in the expression AFTER  the multiplication and before the open \nparenthesis. B indicates the location in the expression AFTER  the addition and before the open \nparenthesis. C indicates the l ocation in the expression AFTER the  close parenthesis and before the \nsubtraction.  \n \nResulting postfix expression:  \n \n \n                         \n \nNote: There are exactly the correct number of boxes above. These should be filled with 13 numbers \nand 12 operators."
        },
        {
            "question_id": 4,
            "question_content": "Consider using the following struct definition for a node of a binary search tree:  \n \ntypedef struct node {  \n    int data;  \n    int height;  \n    struct node* left;  \n    struct node* right;  \n} node;  \n \nAssume that a binary search tree has been built with the data values in each struct filled in, but the heights \nare un initialized. Write a void recursive  function, assignHeights , with no helper functions , which  \ntakes in a pointer, root , to the root of a binary search tree, and assigns the height component of each \nnode in the subtree pointed to by root  to its correct heigh t in the tree. Recall that the height of a leaf node \nis 0, and that more generally, the height of a node is the maximum number of links (left or right) to follow \nfrom that node to any le af node in that subtree. (If root is NULL, then no action should be ta ken.)  \n \nvoid assignHeights(node* root) {  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n}"
        },
        {
            "question_id": 5,
            "question_content": "A mininum  heap  is typically implemented with an array, with the root node ( minimum value ) being \nstored in index 1 of the array. To insert a new value into a heap, it\u2019s originally placed in the first open slot, \nfollowed by running a \u201cpercolate up\u201d operation. Write a function that inserts a value into a heap in this \nmanner. You may assume that the array is allocated to be big enough to store the new ly inserted value. \nThe function prototype is as follows:  \n \nvoid insert(int* heap, int curSize, int newVal);  \n \nheap is a pointer to an array which currently stores curSize  number of values (but has room for at \nleast 1 more). newVal  is the new number to be ins erted into the heap. Write this function which inserts \nthe value newVal into this minimum heap . Take care to avoid infinite loops or array out of bounds issues. \nYou may assume that index curSize+1 is in bounds for the array heap. Also, remember that index 0 of the \narray heap is unused.  You may not write any helper functions.  \n \nvoid insert(int* heap, int curSize, int newVal) {  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n}"
        },
        {
            "question_id": 6,
            "question_content": "Suppose we insert the following strings into a trie:  \n \n     cantaloupe  \n     loop \n     lop \n     lobby  \n     cantilever  \n \n(a) How many nodes would the resulting trie contain, including the root node?  \n \n \n \n \n \n \n \n \n \n \n \n \n     ___________  \n \n(b) (b) What integer value would we store in the count  variable in the root node  of the resulting trie? \nNote that the count variable should be set to the number of valid words with end nodes stored within that \nsub-trie. \n \n \n \n \n \n     ___________  \n \n(c) If we subsequ ently deleted both \u201clobby\u201d and \u201cloop\u201d from the trie, how many total nodes would be  \n     deallocated over the course of those two deletion operations?  \n \n \n \n \n \n     ___________"
        },
        {
            "question_id": 7,
            "question_content": "Consider the following problem:  \n \nGiven two input values, n and k, determine the number of strings of  length  n, which only contains A\u2019s \nand B\u2019s , that have a run of k or more consecutive B\u2019s.  \n \nOne algorithm to solve the problem is as follows:  \n \nRecursively generate each possible string of n letters, each A\u2019s and B\u2019s. These can be generated in \nalphabetical order, never storing more than 1 of the strings at the same time.  \n \nFor each string generated, loop through the string from left to right, keeping a running tally of the \ncurrent number of B\u2019s . (For example, with the string ABBABBBAAB, the running counter would \nupdate as follows 0 \u2192 1 \u2192 2 \u2192 0 \u2192 1 \u2192 2 \u2192 3 \u2192 0 \u2192 0 \u2192 1.) If this running tally ever equals or \nexceeds k, add 1 to a global counter storing the final result.  For simplicities sake, assum e that the loop \ncompletes going through the whole string before 1 is potentially added to the global counter.  \n \nWith proof, determine the Big -Oh runtime of this algorithm in terms of the input parameter, n."
        },
        {
            "question_id": 8,
            "question_content": "A program takes O( nlgm ) time to process n data sets, each which have m values. For 100,000 data sets, \neach with 216 values, the program takes 500 ms  (milliseconds)  to complete. Given this information, how \nmany milliseconds  would  we expect the program to take to process 60,000 data sets, each with 220 \nvalues?"
        },
        {
            "question_id": 9,
            "question_content": "Solve the summation below. Your final result should be a function in terms of n. \n \n\u2211(\ud835\udc58\n2+3)2\ud835\udc5b\n\ud835\udc58=1"
        },
        {
            "question_id": 10,
            "question_content": "Imagine that a virus is spreading through an area we can model as a 2 -dimensional integer array of size \nn by n, where each value in the array stores the current level of virus  at that grid location . The virus can \nbe activated at a particular location. If that location currently has a virus level that is an even integer, \nthen the virus level in that square increases by 1, and then the activation recursively activates the \nlocatio ns above, below, left and right of the immediate location. If the virus level in that square was odd, \nno change occurs and the virus doesn\u2019t spread. Luckily, once the virus level in a square increases by 1 \ndue to an activation, it can\u2019t increase again. Her e is a small example of a before and after picture of \nactivating the virus in row 2, column 0:  \n \n \nComplete the recursive  function below so that it takes in a pointer to the array storing the grid, the value \nof n, and the row and column of where the virus i s activated, and updates the virus levels accordingly. \nDon\u2019t forget to make sure you don\u2019t go out of bounds of the array!  \n \nvoid activate(int** grid, int n, int row, int col)  { \n \n    if (row < 0 || row > = n) return;  \n \n    if ( ___________________________ ) return; // col out of bounds  \n \n    if ( ____________________________ ) return; // odd square  \n \n    ______________ ++;  \n \n    _____________________________________ ;  \n \n    _____________________________________ ;  \n \n    _____________________________________ ;  \n \n    _____________________________________ ;  \n \n}"
        },
        {
            "question_id": 11,
            "question_content": "Show the result after each iteration of performing Insertion  Sort on the array shown below. For \nconvenience, the result after the first and last iteration s are provided. The first row of the table contains \nthe original values of the array.  \n \nIteration  Index 0  Index 1  Index 2  Index 3  Index 4  Index 5  Index 6  Index 7  \n0 16 3 18 15 1 8 12 4 \n1 3 16 18 15 1 8 12 4 \n2         \n3         \n4         \n5         \n6         \n7 1 3 4 8 12 15 16 18"
        },
        {
            "question_id": 12,
            "question_content": "Perform each of the requested base conversions (the base of each number is written as a subscript):  \n \n( a ) (2 pts) 347 10 = ________ 5 \n \n \n \n \n \n \n \n( b ) (2 pts) 361 7 = _________ 10 \n \n \n \n \n \n \n \n( c ) (3 pts) 3AD 16 = ________________________________ 2 \n \n \n \n \n \n \n \n \n \n \n \n \n( d ) (3 pts) 247321 8 = ________________________________ 4"
        }
    ]
}